<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-04-19T01:34:59-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">SReachTools</title><subtitle>SReachTools: A MATLAB toolbox for stochastic reachability</subtitle><entry><title type="html">Release of v1.2</title><link href="http://localhost:4000/jekyll/update/2019/04/18/release-of-v1x2.html" rel="alternate" type="text/html" title="Release of v1.2" /><published>2019-04-18T02:00:00-04:00</published><updated>2019-04-18T02:00:00-04:00</updated><id>http://localhost:4000/jekyll/update/2019/04/18/release-of-v1x2</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2019/04/18/release-of-v1x2.html">&lt;p&gt;A new version of SReachTools is out! Check out
&lt;a href=&quot;https://github.com/sreachtools/SReachTools/releases/tag/v1.2&quot;&gt;https://github.com/sreachtools/SReachTools/releases/tag/v1.2&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SReachPoint has a new method &lt;code class=&quot;highlighter-rouge&quot;&gt;chance-affine-uni&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;This method is an adaptation of Vitus and Tomlin’s CDC 2011 paper.&lt;/li&gt;
      &lt;li&gt;It performs affine controller synthesis using uniform risk allocation (via bisection) and chance constraint optimization.&lt;/li&gt;
      &lt;li&gt;We have rerun all examples and have added tests&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Documentation has been moved to a separate repository &lt;a href=&quot;https://github.com/sreachtools/sreachtools-website&quot;&gt;https://github.com/sreachtools/sreachtools-website&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Minor bug fixes on output control and covariance sanitization.&lt;/li&gt;
  &lt;li&gt;In addition, this version is now participated in repeatability
    &lt;ul&gt;
      &lt;li&gt;HSCC 2019&lt;/li&gt;
      &lt;li&gt;ARCH 2019&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://codeocean.com/explore/capsules/?query=sreachtools&quot;&gt;CodeOcean capsules&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Abraham P. Vinod</name></author><summary type="html">A new version of SReachTools is out! Check out https://github.com/sreachtools/SReachTools/releases/tag/v1.2.</summary></entry><entry><title type="html">Using SReachTools on CodeOcean</title><link href="http://localhost:4000/repeatability/2019/04/07/SReachTools-and-codeocean.html" rel="alternate" type="text/html" title="Using SReachTools on CodeOcean" /><published>2019-04-07T10:00:00-04:00</published><updated>2019-04-07T10:00:00-04:00</updated><id>http://localhost:4000/repeatability/2019/04/07/SReachTools-and-codeocean</id><content type="html" xml:base="http://localhost:4000/repeatability/2019/04/07/SReachTools-and-codeocean.html">&lt;p&gt;CodeOcean is a  cloud-based computational reproducibility platform. This post
shows how you can utilize SReachTools in your CodeOcean capsule for
repeatability. We list few examples that show SReachTools setup for CodeOcean.
Then, we detail the procedure to set up a new capsule.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://codeocean.com/capsule/9849812/tree&quot;&gt;Dubins’ car: &lt;code class=&quot;highlighter-rouge&quot;&gt;SReachSet&lt;/code&gt; demonstration&lt;/a&gt; — &amp;lt;2 min runtime.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://codeocean.com/capsule/81dbdd67-83a4-4b7a-87eb-fbfc1fe72ef2/tree?ID=1763713383dc4aadaf77c4a8c9085b7f&quot;&gt;ARCH 2019: Automated anesthesia delivery&lt;/a&gt; — &amp;lt;1 min runtime.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://codeocean.com/capsule/ddfa8988-7061-4b9c-8cc8-0d3393a6bf02/tree?ID=64794d9f443f4fbc9ba1710cbd0e72c7&quot;&gt;ARCH 2019: Building automation system&lt;/a&gt; — &amp;lt;1 min runtime.
&lt;!--1. Spacecraft rendezvous problem: `SReachPoint` demonstration--&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;detailed-procedure&quot;&gt;Detailed procedure&lt;/h3&gt;

&lt;p&gt;We choose MATLAB 2017b and the follow the installation instructions given in
&lt;a href=&quot;/installation/&quot;&gt;the installation page&lt;/a&gt; to setup &lt;code class=&quot;highlighter-rouge&quot;&gt;GMP&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;GeoCalcLib&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;YALMIP&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;CVX&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;MPT3&lt;/code&gt;, and finally &lt;code class=&quot;highlighter-rouge&quot;&gt;SReachTools&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a new capsule&lt;/li&gt;
  &lt;li&gt;Choose MATLAB 2017b environment
    &lt;ol&gt;
      &lt;li&gt;At the time of writing, this was the latest MATLAB environment available.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;In additional packages, add the following:
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bzip2&lt;/code&gt; (tested with 1.0.6-8) — for unzipping MATLAB toolboxes&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;build-essential&lt;/code&gt; (tested with 12.1ubuntu2) — for
&lt;a href=&quot;https://github.com/worc4021/GeoCalcLib&quot;&gt;GeoCalcLib&lt;/a&gt; installation (&lt;code class=&quot;highlighter-rouge&quot;&gt;gcc&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;m4&lt;/code&gt; (tested with 1.4.17-5) — for
&lt;a href=&quot;https://github.com/worc4021/GeoCalcLib&quot;&gt;GeoCalcLib&lt;/a&gt; installation&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Next, copy the following text into &lt;code class=&quot;highlighter-rouge&quot;&gt;post-install script&lt;/code&gt; section:
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
    
 &lt;span class=&quot;c&quot;&gt;### Install GMP&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# Requires packages build-essentials for gcc and make, and package m4 (don't know why)&lt;/span&gt;
 curl &lt;span class=&quot;nt&quot;&gt;-sL&lt;/span&gt; https://gmplib.org/download/gmp/gmp-6.1.2.tar.bz2 | &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xj
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Downloaded GMP'&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;gmp-6.1.2
 &lt;span class=&quot;c&quot;&gt;# Setup gmp&lt;/span&gt;
 ./configure 
 make 
 make &lt;span class=&quot;nb&quot;&gt;install
 cd&lt;/span&gt; ..
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Installed GMP'&lt;/span&gt;
    
 &lt;span class=&quot;c&quot;&gt;### GeoCalcLib (Download and setup)&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# Requires installation of gmp and packages build-essentials for gcc and make &lt;/span&gt;
 curl &lt;span class=&quot;nt&quot;&gt;-sL&lt;/span&gt; https://github.com/worc4021/GeoCalcLib/archive/master.zip &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; GeoCalcLib.zip
 unzip &lt;span class=&quot;nt&quot;&gt;-qq&lt;/span&gt; GeoCalcLib.zip
 &lt;span class=&quot;nb&quot;&gt;mv &lt;/span&gt;GeoCalcLib-master GeoCalcLib
 &lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;GeoCalcLib.zip
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Downloaded GeoCalcLib'&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# Setup GeoCalcLib&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;GeoCalcLib
 &lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;mexfiles
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'MATLABROOT = /MATLAB'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; User.make
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'INSTALLDIR = /GeoCalcLib/mexfiles'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; User.make
 make
 &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Installed GeoCalcLib'&lt;/span&gt;
    
 &lt;span class=&quot;c&quot;&gt;### YALMIP (Download only)&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# MATLAB simply adds the files to the path to complete the setup&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;YALMIP_RELEASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;R20181012
 curl &lt;span class=&quot;nt&quot;&gt;-sL&lt;/span&gt; https://github.com/yalmip/YALMIP/archive/&lt;span class=&quot;nv&quot;&gt;$YALMIP_RELEASE&lt;/span&gt;.tar.gz | &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xz
 &lt;span class=&quot;nb&quot;&gt;mv &lt;/span&gt;YALMIP-&lt;span class=&quot;nv&quot;&gt;$YALMIP_RELEASE&lt;/span&gt; YALMIP
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Downloaded YALMIP'&lt;/span&gt;
    
 &lt;span class=&quot;c&quot;&gt;### CVX (Download only)&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# We call cvx_setup in MATLAB to complete the setup&lt;/span&gt;
 curl &lt;span class=&quot;nt&quot;&gt;-sL&lt;/span&gt; http://web.cvxr.com/cvx/cvx-a64.tar.gz | &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;zx
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Downloaded CVX'&lt;/span&gt;
    
 &lt;span class=&quot;c&quot;&gt;### SReachTools (Download only)&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# Call srtinit in MATLAB to complete the setup&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;## OPTION 1: Fetch a tagged release&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;SREACHTOOLS_RELEASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.2
 curl &lt;span class=&quot;nt&quot;&gt;-sL&lt;/span&gt; https://github.com/unm-hscl/SReachTools/archive/v&lt;span class=&quot;nv&quot;&gt;$SREACHTOOLS_RELEASE&lt;/span&gt;.zip &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; SReachTools.zip
 unzip &lt;span class=&quot;nt&quot;&gt;-qq&lt;/span&gt; SReachTools.zip
 &lt;span class=&quot;nb&quot;&gt;mv &lt;/span&gt;SReachTools-&lt;span class=&quot;nv&quot;&gt;$SREACHTOOLS_RELEASE&lt;/span&gt; SReachTools
 &lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;SReachTools.zip
 &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Downloaded SReachTools'&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# ## OPTION 2: Fetch bleeding edge&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# curl -sL https://github.com/unm-hscl/SReachTools/archive/master.zip --output SReachTools.zip&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# unzip -qq SReachTools.zip&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# mv SReachTools-master SReachTools&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# rm SReachTools.zip&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# echo 'Downloaded SReachTools'&lt;/span&gt;
    
 &lt;span class=&quot;c&quot;&gt;### Setup MATLAB env for GeoCalcLib, YALMIP, CVX, MPT3, and SReachTools&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# Trailing \ implies newline in bash. MATLAB executes the commands in the quotes.&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# Make sure each line ends with ;\ to avoid MATLAB throwing errors&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# Use GPLK instead of LCP to avoid wierd shifting | Don't do mpt_init again&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 1. Add GeoCalcLib to path&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 2. Add YALMIP to the path&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 3. Setup CVX&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 4. Fetch and install MPT3 using tbxmanager; Initialize MPT3&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# 5. Setup SReachTools&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# Even though, we do not recommend using savepath, we have to do it here due to&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# CodeOcean's setup&lt;/span&gt;
 matlab &lt;span class=&quot;nt&quot;&gt;-nodisplay&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
 addpath('/GeoCalcLib/mexfiles');&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
 disp('Installed GeoCalcLib');&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
 addpath(genpath('/YALMIP'));&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
 disp('Installed YALMIP');&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
 cd('/cvx');&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
 evalc('cvx_setup()');&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
 disp('Installed CVX (Standard bundle)');&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
 mkdir('/tbxmanager');&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
 cd('/tbxmanager');&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
 urlwrite('http://www.tbxmanager.com/tbxmanager.m', 'tbxmanager.m');&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
 a=evalc('tbxmanager');&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
 disp('Installed tbxmanager');&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
 evalc('tbxmanager install mpt mptdoc cddmex fourier glpkmex hysdel lcp sedumi espresso');&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
 evalc('mpt_init');&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
 a=mptopt('lpsolver','glpk','qpsolver','quadprog');&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
 disp('Installed MPT3');&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
 cd('/SReachTools');&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
 srtinit;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
 disp('Installed SReachTools');&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
 savepath;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a file &lt;code class=&quot;highlighter-rouge&quot;&gt;run.sh&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; folder.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
 matlab &lt;span class=&quot;nt&quot;&gt;-nodisplay&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-nosoftwareopengl&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dubinsSReachSetGauss;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;This runs a default example in &lt;code class=&quot;highlighter-rouge&quot;&gt;SReachTools&lt;/code&gt;. If you wish to run a separate
 MATLAB script &lt;code class=&quot;highlighter-rouge&quot;&gt;main.m&lt;/code&gt;, you can upload it the &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; folder, and overwrite
 &lt;code class=&quot;highlighter-rouge&quot;&gt;run.sh&lt;/code&gt; with&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
 matlab &lt;span class=&quot;nt&quot;&gt;-nodisplay&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-nosoftwareopengl&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;main;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;notes&quot;&gt;Notes&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;The first run will take about 3 minutes for setting up of the environment.
However, if the &lt;code class=&quot;highlighter-rouge&quot;&gt;post-install script&lt;/code&gt; is left untouched, then subsequent runs
will be significantly faster.&lt;/li&gt;
  &lt;li&gt;CodeOcean, by default, does not save figures. Use the following lines to save
a figure as a &lt;code class=&quot;highlighter-rouge&quot;&gt;png&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;fig&lt;/code&gt; file.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;saveas(gcf, '../results/FILENAME.png');
saveas(gcf, '../results/FILENAME.fig');
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Abraham P. Vinod</name></author><summary type="html">CodeOcean is a cloud-based computational reproducibility platform. This post shows how you can utilize SReachTools in your CodeOcean capsule for repeatability. We list few examples that show SReachTools setup for CodeOcean. Then, we detail the procedure to set up a new capsule.</summary></entry><entry><title type="html">Release of v1.1</title><link href="http://localhost:4000/jekyll/update/2019/02/14/release-of-v1x10.html" rel="alternate" type="text/html" title="Release of v1.1" /><published>2019-02-14T09:00:00-05:00</published><updated>2019-02-14T09:00:00-05:00</updated><id>http://localhost:4000/jekyll/update/2019/02/14/release-of-v1x10</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2019/02/14/release-of-v1x10.html">&lt;p&gt;We’ve added a lot of new features to SReachTools over the past few months in
preparation for its public submission and debut at the 2019, International 
Conference on Hybrid Systems: Computation and Control, coming up this April.&lt;/p&gt;

&lt;p&gt;The summary of all the features of SReachTools is available in &lt;a href=&quot;/docs/#features-of-sreachtools&quot;&gt;our
documentation webpage&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We summarize the major changes from v1 release.&lt;/p&gt;

&lt;h2 id=&quot;feature-updates&quot;&gt;Feature updates&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SReachSetLag&lt;/code&gt; (Lagrangian-based approximation of stochastic reach set) has
major updates, with the ability to handle arbitrary disturbances:
    &lt;ul&gt;
      &lt;li&gt;We can use &lt;a href=&quot;https://github.com/worc4021/GeoCalcLib&quot;&gt;GeoCalcLib&lt;/a&gt; — a
MATLAB interface to Avis’s &lt;a href=&quot;http://cgm.cs.mcgill.ca/~avis/C/lrs.html&quot;&gt;LRS vertex-facet enumeration
library&lt;/a&gt;. This library serves as
an alternative to MPT’s preferred approach for vertex-facet enumeration,
&lt;a href=&quot;https://www.inf.ethz.ch/personal/fukudak/cdd_home/index.html&quot;&gt;CDD&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;As an (partial) alternative to vertex-facet enumeration problems, we
can, at the user’s choice, utilize support functions to perform Lagrangian
recursions.
        &lt;ul&gt;
          &lt;li&gt;For &lt;code class=&quot;highlighter-rouge&quot;&gt;lag-under&lt;/code&gt;, we provide a complexity-preserving recursion that
requires vertex-facet enumeration to guarantee an underapproximation.&lt;/li&gt;
          &lt;li&gt;For &lt;code class=&quot;highlighter-rouge&quot;&gt;lag-over&lt;/code&gt;, we provide a recursion-free overapproximation using
robust linear programming.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SReachLagController&lt;/code&gt; synthesizes a set-based feedback controller that
achieves the desired probabilistic threshold.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SReachPoint&lt;/code&gt; has a new method &lt;code class=&quot;highlighter-rouge&quot;&gt;voronoi-open&lt;/code&gt; that provides a
probabilistically enforced upper bound on overapproximation error of the
maximal reach probability and an associated optimal open-loop controller.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SReachFwd&lt;/code&gt; (forward stochastic reachability) can now perform analysis using
Monte-Carlo simulation for arbitrary disturbances or use Fourier transforms
(Kalman update) in case of Gaussian disturbances&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;auxillary-updates&quot;&gt;Auxillary updates&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Classes
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RandomVector&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;Creation of non-Gaussian random vectors by specifying a generator for
the same&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getRealization&lt;/code&gt; generates realizations of the random vector.&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getProbPolyhedron&lt;/code&gt; computes the probability of the random vectors
lying in a user-specified polyhedron.&lt;/li&gt;
          &lt;li&gt;Affine transformation of random vectors and vertical concatentation of
random vectors now permitted. Specifically, for a matrix &lt;script type=&quot;math/tex&quot;&gt;F\in
\mathbb{R}^{m\times n}&lt;/script&gt;, a deterministic vector &lt;script type=&quot;math/tex&quot;&gt;v\in
\mathbb{R}^m&lt;/script&gt;, and a &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;-dimensional RandomVector object &lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;F * w + v&lt;/code&gt; returns a &lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt;-dimensional RandomVector object.
Similarly, &lt;code class=&quot;highlighter-rouge&quot;&gt;[rv1;rv2]&lt;/code&gt; returns the vertical concatenation of two
RandomVector objects &lt;code class=&quot;highlighter-rouge&quot;&gt;rv1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;rv2&lt;/code&gt;.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SReachEllipsoid&lt;/code&gt; (new class)
        &lt;ul&gt;
          &lt;li&gt;For appropriate &lt;script type=&quot;math/tex&quot;&gt;c\in \mathbb{R}^n&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;Q\in \mathbb{R}^{n\times
n}&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;Q&lt;/script&gt; positive definite, define an ellipsoid &lt;script type=&quot;math/tex&quot;&gt;S = \{ x \in
\mathbb{R}^{n} : (x - c)^\top Q^{-1} (x - c) \leq 1 \}&lt;/script&gt;. If &lt;script type=&quot;math/tex&quot;&gt;Q&lt;/script&gt; is
positive definite, then a lower dimensional ellipsoid is defined.&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;S.support(v)&lt;/code&gt; implements a vectorized CVX friendly support
function of the ellipsoid in the direction &lt;script type=&quot;math/tex&quot;&gt;v&lt;/script&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;S.contains(v)&lt;/code&gt; checks if &lt;script type=&quot;math/tex&quot;&gt;v\in S&lt;/script&gt;&lt;/li&gt;
          &lt;li&gt;For appropriate &lt;script type=&quot;math/tex&quot;&gt;F\in \mathbb{R}^{m\times n}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;v\in
\mathbb{R}^{m}&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;F S + v&lt;/script&gt; returns an ellipsoid.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SReachLagController&lt;/code&gt; (new class)
        &lt;ul&gt;
          &lt;li&gt;Computes an admissible state-feedback controller that achieves the
specified probabilistic threshold using the Lagrangian-based
underapproximation of the stochastic reach set. See
&lt;a href=&quot;/examples/publish/dubinsSReachSetGauss.html&quot;&gt;examples/dubinsSReachSetGauss.m&lt;/a&gt; 
for its use in an example.&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;helperFunctions/generateMonteCarloSims&lt;/code&gt; can use &lt;code class=&quot;highlighter-rouge&quot;&gt;SReachLagController&lt;/code&gt;
objects to generate realizations of the closed-loop system.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Helper functions
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;spreadPointsOnUnitSphere&lt;/code&gt; computes a collection of “well-separated” unit
vectors in &lt;script type=&quot;math/tex&quot;&gt;\mathbb{R}^n&lt;/script&gt; using difference-of-convex programming.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getBsetWithProb&lt;/code&gt; provides a wrapper around
&lt;code class=&quot;highlighter-rouge&quot;&gt;RandomVector/getProbPolyhedron&lt;/code&gt; to compute the scaling required such that
a random vector lies in a polytope with a desired probability&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;polytopesFromMonteCarloSims&lt;/code&gt; provides convex hulls of a subset of
trajectories (potentially from a Monte-Carlo simulation)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Joseph D. Gleason &amp; Abraham P. Vinod</name></author><summary type="html">We’ve added a lot of new features to SReachTools over the past few months in preparation for its public submission and debut at the 2019, International Conference on Hybrid Systems: Computation and Control, coming up this April.</summary></entry><entry><title type="html">Release of v1 (Stable)</title><link href="http://localhost:4000/jekyll/update/2018/10/22/release-of-v1.html" rel="alternate" type="text/html" title="Release of v1 (Stable)" /><published>2018-10-22T21:27:00-04:00</published><updated>2018-10-22T21:27:00-04:00</updated><id>http://localhost:4000/jekyll/update/2018/10/22/release-of-v1</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2018/10/22/release-of-v1.html">&lt;p&gt;SReachTools Toolbox &lt;a href=&quot;https://github.com/sreachtools/SReachTools/tree/v1.0.0&quot;&gt;v1&lt;/a&gt; is
now out!&lt;/p&gt;

&lt;div class=&quot;important-note&quot; role=&quot;alert&quot;&gt;
    &lt;i class=&quot;fa fa-info-circle&quot;&gt;&lt;/i&gt; 
    &lt;b&gt;Note:&lt;/b&gt;
    This is the first stable release of the
toolbox.&lt;/div&gt;

&lt;p&gt;The SReachTools toolbox is a set of MATLAB codes to facilitate stochastic
reachability computations. The toolbox currently supports reachability
computations with several methods:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Dynamic programming computation (implemented in &lt;code class=&quot;highlighter-rouge&quot;&gt;SReachDynProg&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Stochastic reach set computation (implemented in &lt;code class=&quot;highlighter-rouge&quot;&gt;SReachSet&lt;/code&gt;) and controller
synthesis (implemented in &lt;code class=&quot;highlighter-rouge&quot;&gt;SReachPoint&lt;/code&gt;) using:
    &lt;ul&gt;
      &lt;li&gt;Lagrangian (set-based) over- and under-approximations&lt;/li&gt;
      &lt;li&gt;Fourier transformation approximations, with support for open-loop
controller synthesis&lt;/li&gt;
      &lt;li&gt;Chance-constrained under-approximations, with support for open-loop and
affine controller synthesis&lt;/li&gt;
      &lt;li&gt;Particle filter-based approximation for open-loop controller synthesis&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Forward stochastic reachability analysis (implemented in &lt;code class=&quot;highlighter-rouge&quot;&gt;SReachFwd&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can analyze &lt;em&gt;stochastic linear time-invariant and time-varying systems&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We have submitted a tool paper describing the features of SReachTools to the
&lt;em&gt;22nd ACM International Conference on Hybrid Systems: Computation and Control
summarizing the features of SReachTools&lt;/em&gt;. A copy of this submission is
&lt;a href=&quot;https://github.com/sreachtools/SReachTools/raw/master/SReachTools.pdf&quot;&gt;available in the
repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;See the quick-start guide below for installation instructions.&lt;/p&gt;

&lt;h2 id=&quot;important-notes-on-this-release&quot;&gt;Important notes on this release&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Updated License to GNU GPLv3, or (at your option) a later version.
See &lt;a href=&quot;/license&quot;&gt;LICENSE&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;A complete overhaul of the APIs. For more details, see our &lt;a href=&quot;https://github.com/sreachtools/SReachTools/raw/master/SReachTools.pdf&quot;&gt;submitted tool
paper&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;All promises made in our previous &lt;a href=&quot;./2018-05-31-release-of-v0x2.md&quot;&gt;blog post&lt;/a&gt;
have been met:
    &lt;ul&gt;
      &lt;li&gt;Extension to LTV systems&lt;/li&gt;
      &lt;li&gt;Support for chance-constrained and particle filter-based verification&lt;/li&gt;
      &lt;li&gt;Added online API documentation. See &lt;a href=&quot;/docs/index.html&quot;&gt;online documentation&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Affine control synthesis technique based on chance constraints and difference
of convex programs have been added. See our &lt;a href=&quot;https://hscl.unm.edu/affinecontrollersynthesis/&quot;&gt;submitted
paper (arXiv)&lt;/a&gt; for more
details.&lt;/li&gt;
  &lt;li&gt;Lagrangian over-approximation has been added into the toolbox. See our
&lt;a href=&quot;https://arxiv.org/pdf/1810.07118&quot;&gt;submitted paper (arXiv)&lt;/a&gt; for more details.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;quick-start-guide-installation-and-examples&quot;&gt;Quick start guide: installation and examples&lt;/h2&gt;

&lt;h3 id=&quot;dependencies&quot;&gt;Dependencies&lt;/h3&gt;

&lt;p&gt;You can skip installing the dependencies marked &lt;strong&gt;optional&lt;/strong&gt;.
This will disable some of the features of SReachTools or hamper performance.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;MATLAB (&amp;gt;2017a)
    &lt;ol&gt;
      &lt;li&gt;Toolboxes
        &lt;ol&gt;
          &lt;li&gt;MATLAB’s Statistics and Machine Learning Toolbox&lt;/li&gt;
          &lt;li&gt;MATLAB’s Global Optimization Toolbox (&lt;strong&gt;Optional&lt;/strong&gt;)&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;MPT3 (&lt;a href=&quot;https://www.mpt3.org/&quot;&gt;https://www.mpt3.org/&lt;/a&gt;)
    &lt;ol&gt;
      &lt;li&gt;Copy the MATLAB script &lt;a href=&quot;https://www.mpt3.org/Main/Installation?action=download&amp;amp;upname=install_mpt3.m&quot;&gt;install_mpt3.m&lt;/a&gt; provided by MPT3 from the browser, and run it in MATLAB to automatically download MPT3 and its dependencies.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;CVX (&lt;a href=&quot;http://cvxr.com/cvx/&quot;&gt;http://cvxr.com/cvx/&lt;/a&gt;)
    &lt;ol&gt;
      &lt;li&gt;Install the CVX (Standard bundle, including Gurobi and/or MOSEK)&lt;/li&gt;
      &lt;li&gt;Installation instructions are given in &lt;a href=&quot;http://cvxr.com/cvx/download/&quot;&gt;http://cvxr.com/cvx/download/&lt;/a&gt;.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;(&lt;strong&gt;Optional&lt;/strong&gt;) We recommend using Gurobi as the backend solver for the convex programs
formulated by SReachTools. In practice, we find both CVX and MPT3 perform
much better with Gurobi. See
&lt;a href=&quot;http://www.gurobi.com/registration/download-reg&quot;&gt;http://www.gurobi.com/registration/download-reg&lt;/a&gt;
for more details. Note that Gurobi offers free academic license.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Install the necessary dependencies listed above&lt;/li&gt;
  &lt;li&gt;Clone the SReachTools repository (or download the latest zip file from
&lt;a href=&quot;https://github.com/sreachtools/SReachTools/releases&quot;&gt;Releases&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Change the MATLAB current working directory to where SReachTools was
downloaded&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;srtinit&lt;/code&gt; in MATLAB to add the toolbox to the paths and ensure all
must-have dependencies are properly installed.
    &lt;ul&gt;
      &lt;li&gt;You can add &lt;code class=&quot;highlighter-rouge&quot;&gt;cd &amp;lt;path_to_sreachtools_repo&amp;gt;;srtinit&lt;/code&gt; to your MATLAB’s
&lt;code class=&quot;highlighter-rouge&quot;&gt;startup.m&lt;/code&gt; to automatically have this done in future.&lt;/li&gt;
      &lt;li&gt;Additional steps (optional):
        &lt;ul&gt;
          &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;srtinit -t&lt;/code&gt; to run all the unit tests.&lt;/li&gt;
          &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;srtinit -v&lt;/code&gt; to visualize the steps the changes to the path and
check for recommended dependencies.&lt;/li&gt;
          &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;srtinit -x&lt;/code&gt; to remove functions of SReachTools from MATLAB’s path
after use.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Abraham P. Vinod  &amp; Joseph D. Gleason</name></author><summary type="html">SReachTools Toolbox v1 is now out!</summary></entry><entry><title type="html">Release of v0.2</title><link href="http://localhost:4000/jekyll/update/2018/05/31/release-of-v0x2.html" rel="alternate" type="text/html" title="Release of v0.2" /><published>2018-05-31T15:40:00-04:00</published><updated>2018-05-31T15:40:00-04:00</updated><id>http://localhost:4000/jekyll/update/2018/05/31/release-of-v0x2</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2018/05/31/release-of-v0x2.html">&lt;p&gt;SReachTools Toolbox &lt;a href=&quot;https://github.com/sreachtools/SReachTools/tree/v0.2&quot;&gt;v0.2&lt;/a&gt; is now out! The SReachTools toolbox is a set of MATLAB codes to facilitate stochastic reachability computations. The toolbox currently supports reachability computations with several methods:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Dynamic programming computation&lt;/li&gt;
  &lt;li&gt;Fourier transformation approximations&lt;/li&gt;
  &lt;li&gt;Lagrangian (set-based) approximations
We currently support forward and backward stochastic reachability of &lt;em&gt;stochastic LTI systems&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the quick-start guide below for installation instructions.&lt;/p&gt;

&lt;h2 id=&quot;quick-start-guide-installation-and-examples&quot;&gt;Quick start guide: installation and examples&lt;/h2&gt;

&lt;h3 id=&quot;dependencies&quot;&gt;Dependencies&lt;/h3&gt;

&lt;p&gt;You can skip installing the dependencies marked &lt;strong&gt;optional&lt;/strong&gt;.
This will disable some of the features of SReachTools.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;MATLAB (&amp;gt;2017a)
    &lt;ul&gt;
      &lt;li&gt;Toolboxes
        &lt;ul&gt;
          &lt;li&gt;MATLAB’s Global Optimization Toolbox (&lt;strong&gt;Optional&lt;/strong&gt;)&lt;/li&gt;
          &lt;li&gt;MATLAB’s Statistics and Machine Learning Toolbox (&lt;strong&gt;Optional&lt;/strong&gt;)&lt;/li&gt;
          &lt;li&gt;MATLAB’s Control System Toolbox (&lt;strong&gt;Optional&lt;/strong&gt;)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MPT3 (&lt;a href=&quot;http://people.ee.ethz.ch/~mpt/3/&quot;&gt;http://people.ee.ethz.ch/~mpt/3/&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;Do an automatic install using a MATLAB script &lt;a href=&quot;http://control.ee.ethz.ch/~mpt/3/Main/Installation?action=download&amp;amp;upname=install_mpt3.m&quot;&gt;install_mpt3.m&lt;/a&gt; provided by MPT3.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CVX (&lt;a href=&quot;http://cvxr.com/cvx/&quot;&gt;http://cvxr.com/cvx/&lt;/a&gt;) (&lt;strong&gt;Optional&lt;/strong&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Install the necessary dependencies (MATLAB and MPT3 are a must)&lt;/li&gt;
  &lt;li&gt;Clone the &lt;em&gt;SReachTools&lt;/em&gt; repository (or download the zip file)&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;srtinit -v -t&lt;/code&gt; in MATLAB to add the toolbox to the paths, visualize the steps, and test the installation.
    &lt;ul&gt;
      &lt;li&gt;You can add &lt;code class=&quot;highlighter-rouge&quot;&gt;p=pwd();cd /path/to/SReachTools/folder;srtinit;cd(p);&lt;/code&gt; to your MATLAB’s &lt;code class=&quot;highlighter-rouge&quot;&gt;startup.m&lt;/code&gt; to automatically have this done in future.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;p&gt;See our &lt;a href=&quot;/examples&quot;&gt;examples page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-are-we-working-on-next&quot;&gt;What are we working on next?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Extension to LTV systems&lt;/li&gt;
  &lt;li&gt;Support for chance-constrained and particle filter-based verification&lt;/li&gt;
  &lt;li&gt;Adding online API documentation&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Joseph D. Gleason &amp; Abraham P. Vinod</name></author><summary type="html">SReachTools Toolbox v0.2 is now out! The SReachTools toolbox is a set of MATLAB codes to facilitate stochastic reachability computations. The toolbox currently supports reachability computations with several methods: Dynamic programming computation Fourier transformation approximations Lagrangian (set-based) approximations We currently support forward and backward stochastic reachability of stochastic LTI systems.</summary></entry><entry><title type="html">Release of v0.1</title><link href="http://localhost:4000/jekyll/update/2018/05/25/release-of-v0x1.html" rel="alternate" type="text/html" title="Release of v0.1" /><published>2018-05-25T15:34:00-04:00</published><updated>2018-05-25T15:34:00-04:00</updated><id>http://localhost:4000/jekyll/update/2018/05/25/release-of-v0x1</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2018/05/25/release-of-v0x1.html">&lt;p&gt;We have released the first public version of the SReachTools (Stochastic Reachability Tools) Toolbox! The codes and functionality of &lt;a href=&quot;https://github.com/sreachtools/SReachTools/tree/v0.1-alpha&quot;&gt;v0.1&lt;/a&gt; have been tested internally by us, but we do expect bugs to be present.&lt;/p&gt;

&lt;p&gt;Please help us out: if you use the code and find a bug, create an &lt;a href=&quot;https://github.com/sreachtools/SReachTools/issues&quot;&gt;issue&lt;/a&gt; so we know what needs to be fixed. If you would like to fix the bug yourself, please check out our &lt;a href=&quot;/contributing&quot;&gt;contributing&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;We will continue to make changes to the code over the next month in preparation for the v1 release (expected in late July/early August).&lt;/p&gt;</content><author><name>Joseph D. Gleason &amp; Abraham P. Vinod</name></author><summary type="html">We have released the first public version of the SReachTools (Stochastic Reachability Tools) Toolbox! The codes and functionality of v0.1 have been tested internally by us, but we do expect bugs to be present.</summary></entry></feed>